// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/02/2017 09:28:43"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          SignExtend
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SignExtend_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] dataIn;
// wires                                               
wire [31:0] dataOut;

// assign statements (if any)                          
SignExtend i1 (
// port map - connection between master ports and signals/registers   
	.dataIn(dataIn),
	.dataOut(dataOut)
);
initial 
begin 
#1000000 $finish;
end 
// dataIn[ 15 ]
initial
begin
	dataIn[15] = 1'b0;
	dataIn[15] = #410000 1'b1;
	dataIn[15] = #240000 1'b0;
end 
// dataIn[ 14 ]
initial
begin
	dataIn[14] = 1'b0;
end 
// dataIn[ 13 ]
initial
begin
	dataIn[13] = 1'b0;
end 
// dataIn[ 12 ]
initial
begin
	dataIn[12] = 1'b0;
	dataIn[12] = #30000 1'b1;
	dataIn[12] = #250000 1'b0;
end 
// dataIn[ 11 ]
initial
begin
	dataIn[11] = 1'b0;
end 
// dataIn[ 10 ]
initial
begin
	dataIn[10] = 1'b0;
end 
// dataIn[ 9 ]
initial
begin
	dataIn[9] = 1'b0;
	dataIn[9] = #30000 1'b1;
	dataIn[9] = #250000 1'b0;
	dataIn[9] = #130000 1'b1;
	dataIn[9] = #240000 1'b0;
end 
// dataIn[ 8 ]
initial
begin
	dataIn[8] = 1'b0;
	dataIn[8] = #410000 1'b1;
	dataIn[8] = #240000 1'b0;
end 
// dataIn[ 7 ]
initial
begin
	dataIn[7] = 1'b0;
end 
// dataIn[ 6 ]
initial
begin
	dataIn[6] = 1'b0;
	dataIn[6] = #410000 1'b1;
	dataIn[6] = #240000 1'b0;
end 
// dataIn[ 5 ]
initial
begin
	dataIn[5] = 1'b0;
	dataIn[5] = #30000 1'b1;
	dataIn[5] = #250000 1'b0;
end 
// dataIn[ 4 ]
initial
begin
	dataIn[4] = 1'b0;
	dataIn[4] = #30000 1'b1;
	dataIn[4] = #250000 1'b0;
	dataIn[4] = #130000 1'b1;
	dataIn[4] = #240000 1'b0;
end 
// dataIn[ 3 ]
initial
begin
	dataIn[3] = 1'b0;
	dataIn[3] = #410000 1'b1;
	dataIn[3] = #240000 1'b0;
end 
// dataIn[ 2 ]
initial
begin
	dataIn[2] = 1'b0;
	dataIn[2] = #30000 1'b1;
	dataIn[2] = #250000 1'b0;
end 
// dataIn[ 1 ]
initial
begin
	dataIn[1] = 1'b0;
	dataIn[1] = #410000 1'b1;
	dataIn[1] = #240000 1'b0;
end 
// dataIn[ 0 ]
initial
begin
	dataIn[0] = 1'b0;
end 
endmodule

